{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","App.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","userName","email","phoneNumber","website","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","name","required","placeholder","value","onChange","App","useState","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","newContact","nanoid","editedContact","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4e82cfb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n  return (\r\n\r\n    <tr>\r\n      <td>{contact.fullName}</td>\r\n      <td>{contact.userName}</td>\r\n      <td>{contact.email}</td>\r\n      <td>{contact.phoneNumber}</td>\r\n      <td>{contact.website}</td>\r\n      <td>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick(event, contact)}>\r\n          Edit\r\n        </button>\r\n        <button type=\"button\" id=\"btn_delete\" onClick={() => handleDeleteClick(contact.id)}>\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n\r\n  );\r\n};\r\nexport default ReadOnlyRow;","import React from 'react'\r\n\r\nconst EditableRow = ({\r\n    editFormData,\r\n    handleEditFormChange,\r\n    handleCancelClick,\r\n}) => {\r\n    return (\r\n       <tr>\r\n           <td>\r\n           <input\r\n          type=\"text\"\r\n          name=\"fullName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a name\"\r\n          value={editFormData.fullName}\r\n          onChange={handleEditFormChange}/>\r\n           </td>\r\n           <td>\r\n           <input\r\n          type=\"text\"\r\n          name=\"userName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an username\"\r\n          value={editFormData.userName}\r\n          onChange={handleEditFormChange}/>\r\n           </td>\r\n           <td>\r\n           <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an email\"\r\n          value={editFormData.email}\r\n          onChange={handleEditFormChange}/>\r\n           </td>\r\n           <td>\r\n           <input\r\n          type=\"text\"\r\n          name=\"phoneNumber\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a phoneno\"\r\n          value={editFormData.phoneNumber}\r\n          onChange={handleEditFormChange}/>\r\n           </td>\r\n           <td>\r\n           <input\r\n          type=\"text\"\r\n          name=\"website\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a website\"\r\n          value={editFormData.website}\r\n          onChange={handleEditFormChange}/>\r\n           </td>\r\n           <td>\r\n               <button type=\"submit\" id=\"btn_save\">Save</button>\r\n               <button type=\"button\" id=\"btn_cancel\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button>\r\n           </td>\r\n           </tr>\r\n    )\r\n}\r\n\r\nexport default EditableRow\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport \"./App.css\";\r\nimport data from \"./mock-data.json\";\r\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\r\nimport EditableRow from \"./components/EditableRow\";\r\n\r\nconst App = () => {\r\n  const [contacts, setContacts] = useState(data);\r\n  const [addFormData, setAddFormData] = useState({\r\n    fullName: '',\r\n    userName: '',\r\n    email: '',\r\n    phoneNumber: '',\r\n    website: '',\r\n  });\r\n\r\n  const [editFormData,setEditFormData]=useState({\r\n    fullName: '',\r\n    userName: '',\r\n    email: '',\r\n    phoneNumber: '',\r\n    website: '',\r\n  })\r\n\r\n  const [editContactId, setEditContactId] = useState(null);\r\n\r\n  const handleAddFormChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute('name');\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...addFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setAddFormData(newFormData);\r\n  };\r\n\r\n  const handleEditFormChange = (event)=>{\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData={ ...editFormData};\r\n    newFormData[fieldName] = fieldValue;\r\n    \r\n    setEditFormData(newFormData);\r\n  };\r\n\r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newContact = {\r\n      id: nanoid(),\r\n      fullName: addFormData.fullName,\r\n      userName: addFormData.userName,\r\n      email: addFormData.email,\r\n      phoneNumber: addFormData.phoneNumber,\r\n      website: addFormData.website,\r\n    };\r\n\r\n    const newContacts = [...contacts, newContact]\r\n    setContacts(newContacts);\r\n  };\r\n\r\n  const handleEditFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const editedContact = {\r\n      id: editContactId,\r\n      fullName: editFormData.fullName,\r\n      userName: editFormData.userName,\r\n      email: editFormData.email,\r\n      phoneNumber: editFormData.phoneNumber,\r\n      website: editFormData.website,\r\n    };\r\n\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n\r\n    newContacts[index] = editedContact;\r\n\r\n    setContacts(newContacts);\r\n    setEditContactId(null);\r\n  };\r\n\r\n\r\n  const handleEditClick = (event,contact)=>{\r\n    event.preventDefault();\r\n    setEditContactId(contact.id);\r\n\r\n    const formValues = {\r\n      fullName: contact.fullName,\r\n      userName: contact.userName,\r\n      email: contact.email,\r\n      phoneNumber: contact.phoneNumber,\r\n      website: contact.website\r\n    }\r\n    setEditFormData(formValues);\r\n  };\r\n\r\n  const handleCancelClick = () => {\r\n    setEditContactId(null);\r\n  };\r\n\r\n  const handleDeleteClick = (contactId) => {\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === contactId);\r\n\r\n    newContacts.splice(index, 1);\r\n\r\n    setContacts(newContacts);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1>ADD U$ERS</h1>\r\n      <form onSubmit={handleAddFormSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"fullName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a name\"\r\n          onChange={handleAddFormChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"userName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an username\"\r\n          onChange={handleAddFormChange}\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an email\"\r\n          onChange={handleAddFormChange}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          name=\"phoneNumber\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a phoneno\"\r\n          onChange={handleAddFormChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"website\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a website\"\r\n          onChange={handleAddFormChange}\r\n        />\r\n        <br />\r\n        <button type=\"submit\" id=\"btn_delete\"> Add </button>\r\n\r\n      </form><br/><hr/>\r\n      <form onSubmit={handleEditFormSubmit}>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td><b>Name</b></td>\r\n              <td><b>Username</b></td>\r\n              <td><b>Email</b></td>\r\n              <td><b>Phone</b></td>\r\n              <td><b>Website</b></td>\r\n              <td><b>Actions</b></td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contacts.map((contact) => (\r\n              <Fragment>\r\n                {editContactId === contact.id ? (\r\n                  <EditableRow \r\n                   editFormData={editFormData}\r\n                   handleEditFormChange={handleEditFormChange}\r\n                   handleCancelClick={handleCancelClick}\r\n                    />\r\n                ) : (\r\n                  <ReadOnlyRow \r\n                  contact={contact} \r\n                  handleEditClick={handleEditClick}\r\n                  handleDeleteClick={handleDeleteClick}\r\n                  />\r\n                )}\r\n              </Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n      \r\n    </div>\r\n  )\r\n};\r\nexport default App","import React from \"react\"\r\nimport ReactDOM, { render } from \"react-dom\"\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\"))"],"sourceRoot":""}